1.编译器
	编译器是angular提供的一项服务，用来遍历DOM节点，查找特定的属性，编译过程分为两个阶段：
	①编译：遍历DOM节点，收集所有的指令，返回一个连接函数(link func)
	②连接：将上一步收集到的每个指令与其所在的作用域(scope)连接成一个实时视图。
	任何作用域中的模型改变会实时在视图中反应出来，同时任何用户与视图的交互则会映射到作用域的模型中。
	这样，作用域中的数据模型就成了唯一的数据源。

2.指令
	在编译过程中，遇到特定的html结构(也就是指令)时，指令所声明的行为操作会被触发。指令可以被放在元素名
	属性，类名，甚至是注释中。
	***指令其实就是在编译器遍历DOM时碰到就需要执行的函数。

3.编译指令(html编译可细分为三个阶段)
	1.$compile遍历DOM节点，匹配指令。
	   如果编译器发现某个元素匹配一个指令，那么这个指令就被添加到指令列表中(该列表与DOM元素对应)。
	   一个元素可能匹配到多个指令(也就是一个元素里面可能有多个指令)。
	2.当所有指令都匹配到相应的元素时，编译器按照指令的priority(优先级)属性来排列指令的编译顺序。
	   然后依次执行每个指令的 compile 函数。每个 compile 函数有一次更改该指令所对应的DOM模板的机会。
	   然后，每个 compile 函数返回一个 link 函数。这些函数构成一个“合并的”连接函数，
	   它会调用每个指令返回的 link 函数。
	3.之后，$compile 调用第二步返回的连接函数，将模板和对应的作用域连接。
	   而这又会依次调用连接函数中包含的每个指令对应的 link 函数，
	   进而在各个DOM元素上注册监听器以及在相应的 scope 中设置对应的 $watchs。

注意： 连接 意味着在DOM上设置监听器以及在相关的作用域中设置 $watch 以保证二者（译注：DOM和作用域）的同步。

备注：个人总结，angularjs编译器进行解释编译过程：
	1.两个过程：(编译-连接)
	编译：angularjs编译器遍历DOM节点找到所有指令，按照priority(优先级)进行编译，
		编译扩展成新的HTML结构(模板)。
	连接：将模板和对应的作用域连接，调用link函数，进而在各个DOM元素上注册监听器
		以及在相应的 scope 中设置对应的 $watch。
	2.遍历每个节点查找指令问题
	解决办法：将编译过程分为编译，连接
	连接函数作用：(同时可以将作用域中的内容复制到DOM中去)。

4.作用域
	1)：当一个控制器通过 ng-controller 指令被添加到DOM中时，ng 会调用该控制器的构造函数来生成一个控制器对象，
	这样，就创建了一个新的子级 作用域(scope)。在这个构造函数中，作用域(scope)会作为$scope参数注入其中，
	并允许用户代码访问它。
	控制器一般会做两件事：
		①初始化$scope对象，②为$scope对象添加行为(方法)
	《***》当我们创建应用程序时，我们通常要为angular的$scope对象设置初始状态，这是通过在$scope对象上添加
	属性实现的。这些属性就是供在视图中展示用的视图模型，它们在与此控制器相关的模板中均可以访问到。
	《***》任何对象(或者原生类型的变量)被添加到scope后都将成为scope属性，作为数据模型供模板/视图调用
	任何方法被添加到scope后，也能在模板/视图中通过angular表达式或者angular的事件处理器(如：ngClick)调用
	
	2)：正确使用controller控制器
	通常情况下，控制器不应赋予太多的责任和义务，它需要负责一个单一视图所需的业务逻辑。
	最常见的保持控制器“纯度”的方法是将那些不属于控制器的逻辑都封装到服务(services)中，然后在控制器中
	通过依赖注入调用相关服务。
	
	3)：下面场合不能使用控制器
	①任何形式的DOM操作：控制器只应该包含业务逻辑。DOM操作则属于应用程序的表现层逻辑操作，向来以测试
	难度之高闻名于业界。把任何表现层的逻辑放到控制器中将会大大增加业务逻辑的测试难度。ng提供数据绑定
	来实现自动化的DOM操作。如果需要手动进行DOM操作，那么最好将表现层的逻辑封装在指令中。
	②格式化输入：使用angular表单控件代替
	③过滤输出：使用angular过滤器代替
	④在控制器间复用有状态或无状态的代码：使用angular服务代替。
	⑤管理其他部件得生命周期(如手动创建service实例)

	4)：将控制器与scope对象关联
	通过两种方法可以实现控制器和scope对象关联:
	ngController指令这个指令就会创建一个新的scope
	$route路由服务
	【scope是由ng-controller指令创建并由其对应的控制器所管理】
		
























